    Checking ama_archiver v0.1.0 (/home/eclair/Documents/coding/rust/ama_archiver)
error: expected one of `=`, `@`, or `|`, found `.`
  --> src/main.rs:10:29
   |
10 |         if let FIRST_CC_NAME.to_string() = span.inner_html() {
   |                             ^ expected one of `=`, `@`, or `|`

error[E0106]: missing lifetime specifier
 --> src/main.rs:6:46
  |
6 | fn get_first_index_node(raw_html: String) -> ElementRef {
  |                                              ^^^^^^^^^^ expected named lifetime parameter
  |
  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
help: consider using the `'static` lifetime
  |
6 | fn get_first_index_node(raw_html: String) -> ElementRef<'static> {
  |                                                        +++++++++

error[E0106]: missing lifetime specifier
  --> src/main.rs:30:19
   |
30 |     exchange_url: &str, // ElementRef::attr
   |                   ^ expected named lifetime parameter
   |
help: consider introducing a named lifetime parameter
   |
27 ~ struct AmaExchange<'a> {
28 |     cc_name: String, // ElementRef::inner_html
29 |     fan_name: String, // ElementRef::inner_html
30 ~     exchange_url: &'a str, // ElementRef::attr
   |

warning: unused import: `ureq`
 --> src/main.rs:1:5
  |
1 | use ureq;
  |     ^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

error[E0601]: `main` function not found in crate `ama_archiver`
  --> src/main.rs:74:2
   |
74 | }
   |  ^ consider adding a `main` function to `src/main.rs`

error[E0308]: mismatched types
  --> src/main.rs:41:13
   |
40 |         match *(current_node.value()).name() {
   |               ------------------------------ this expression has type `str`
41 |             "span" => {
   |             ^^^^^^ expected `str`, found `&str`

error[E0308]: mismatched types
  --> src/main.rs:44:13
   |
40 |         match *(current_node.value()).name() {
   |               ------------------------------ this expression has type `str`
...
44 |             "a" => {
   |             ^^^ expected `str`, found `&str`

error[E0308]: mismatched types
  --> src/main.rs:47:21
   |
46 |                 let exchange_url: &str = match current_node.attr("href") {
   |                                                ------------------------- this expression has type `Option<&str>`
47 |                     Ok(href) => href,
   |                     ^^^^^^^^ expected `Option<&str>`, found `Result<_, _>`
   |
   = note: expected enum `Option<&str>`
              found enum `Result<_, _>`

error[E0308]: mismatched types
  --> src/main.rs:48:21
   |
46 |                 let exchange_url: &str = match current_node.attr("href") {
   |                                                ------------------------- this expression has type `Option<&str>`
47 |                     Ok(href) => href,
48 |                     Err(href404) => panic!("Error for {fan_name}'s question for {cc_name}: {:?}", href404),
   |                     ^^^^^^^^^^^^ expected `Option<&str>`, found `Result<_, _>`
   |
   = note: expected enum `Option<&str>`
              found enum `Result<_, _>`

error[E0308]: mismatched types
  --> src/main.rs:67:24
   |
37 |     let mut current_node: ElementRef = starting_node;
   |                           ---------- expected due to this type
...
67 |         current_node = current_node.next_sibling();
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `ElementRef<'_>`, found `Option<NodeRef<'_, Node>>`
   |
   = note: expected struct `ElementRef<'_>`
                found enum `Option<ego_tree::NodeRef<'_, Node>>`
help: try removing the method call
   |
67 -         current_node = current_node.next_sibling();
67 +         current_node = current_node;
   |

Some errors have detailed explanations: E0106, E0308, E0601.
For more information about an error, try `rustc --explain E0106`.
warning: `ama_archiver` (bin "ama_archiver") generated 1 warning
error: could not compile `ama_archiver` (bin "ama_archiver") due to 9 previous errors; 1 warning emitted
